#
# The Python Imaging Library.
# $Id$
#
# MPEG file handling
#
# History:
#       95-09-09 fl     Created
#
# Copyright (c) Secret Labs AB 1997.
# Copyright (c) Fredrik Lundh 1995.
#
# See the README file for information on usage and redistribution.
#
<<<<<<< HEAD
from __future__ import annotations

from . import Image, ImageFile
from ._binary import i8
from ._typing import SupportsRead
=======


from . import Image, ImageFile
from ._binary import i8
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915

#
# Bitstream parser


class BitStream:
<<<<<<< HEAD
    def __init__(self, fp: SupportsRead[bytes]) -> None:
=======
    def __init__(self, fp):
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
        self.fp = fp
        self.bits = 0
        self.bitbuffer = 0

<<<<<<< HEAD
    def next(self) -> int:
        return i8(self.fp.read(1))

    def peek(self, bits: int) -> int:
=======
    def next(self):
        return i8(self.fp.read(1))

    def peek(self, bits):
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
        while self.bits < bits:
            c = self.next()
            if c < 0:
                self.bits = 0
                continue
            self.bitbuffer = (self.bitbuffer << 8) + c
            self.bits += 8
        return self.bitbuffer >> (self.bits - bits) & (1 << bits) - 1

<<<<<<< HEAD
    def skip(self, bits: int) -> None:
=======
    def skip(self, bits):
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
        while self.bits < bits:
            self.bitbuffer = (self.bitbuffer << 8) + i8(self.fp.read(1))
            self.bits += 8
        self.bits = self.bits - bits

<<<<<<< HEAD
    def read(self, bits: int) -> int:
=======
    def read(self, bits):
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
        v = self.peek(bits)
        self.bits = self.bits - bits
        return v


<<<<<<< HEAD
def _accept(prefix: bytes) -> bool:
    return prefix[:4] == b"\x00\x00\x01\xb3"


=======
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
##
# Image plugin for MPEG streams.  This plugin can identify a stream,
# but it cannot read it.


class MpegImageFile(ImageFile.ImageFile):
    format = "MPEG"
    format_description = "MPEG"

<<<<<<< HEAD
    def _open(self) -> None:
        assert self.fp is not None

        s = BitStream(self.fp)
=======
    def _open(self):
        s = BitStream(self.fp)

>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
        if s.read(32) != 0x1B3:
            msg = "not an MPEG file"
            raise SyntaxError(msg)

<<<<<<< HEAD
        self._mode = "RGB"
=======
        self.mode = "RGB"
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915
        self._size = s.read(12), s.read(12)


# --------------------------------------------------------------------
# Registry stuff

<<<<<<< HEAD
Image.register_open(MpegImageFile.format, MpegImageFile, _accept)
=======
Image.register_open(MpegImageFile.format, MpegImageFile)
>>>>>>> 6f3b3abeefff8b93e040b308d3e680f1dd70d915

Image.register_extensions(MpegImageFile.format, [".mpg", ".mpeg"])

Image.register_mime(MpegImageFile.format, "video/mpeg")
